var documenterSearchIndex = {"docs":
[{"location":"connection/#Connection-to-the-GitHub-GraphQL-api","page":"Connection and GitHub","title":"Connection to the GitHub GraphQL api","text":"","category":"section"},{"location":"connection/","page":"Connection and GitHub","title":"Connection and GitHub","text":"CurrentModule = Repotomata","category":"page"},{"location":"connection/#The-structure-holding-all-the-GitHub-information","page":"Connection and GitHub","title":"The structure holding all the GitHub information","text":"","category":"section"},{"location":"connection/","page":"Connection and GitHub","title":"Connection and GitHub","text":"Repo\nRepo(owner::AbstractString, name::AbstractString, background_color::Colorant)","category":"page"},{"location":"connection/#Repotomata.Repo","page":"Connection and GitHub","title":"Repotomata.Repo","text":"Repo\n\nWrapper representing the GitHub Repository.\n\nFields\n\nowner::String: the repository owner.\nname::String: the repository name.\nlanguages::Vector{Language}: the repository Languages.\nstargazer_count::UInt: the repository stargazer count.\nforks_count::UInt: the repository forks count.\nwatchers_count::UInt: the repository watchers count.\nupdatedat::DateTime: the repository last update time.\nbackground_color::Colorant: the chosen background color\n\nSee also: Language\n\n\n\n\n\n","category":"type"},{"location":"connection/#Repotomata.Repo-Tuple{AbstractString,AbstractString,ColorTypes.Colorant}","page":"Connection and GitHub","title":"Repotomata.Repo","text":"Repo\n\nThe Repo constructor will create a Connection with the given owner/name and query the  needed information.\n\nSee also: Connection\n\n\n\n\n\n","category":"method"},{"location":"connection/#The-connection-wrapper","page":"Connection and GitHub","title":"The connection wrapper","text":"","category":"section"},{"location":"connection/","page":"Connection and GitHub","title":"Connection and GitHub","text":"Connection","category":"page"},{"location":"connection/#Repotomata.Connection","page":"Connection and GitHub","title":"Repotomata.Connection","text":"Connection\n\nSimple wrapper around Diana.Client with the current repository name and owner.\n\nFields\n\nowner::String: the repository owner.\nname::String: the repository name.\nclient::Diana.Client: the Diana.Client object.\n\n\n\n\n\n","category":"type"},{"location":"connection/#The-language-structure","page":"Connection and GitHub","title":"The language structure","text":"","category":"section"},{"location":"connection/","page":"Connection and GitHub","title":"Connection and GitHub","text":"Language","category":"page"},{"location":"connection/#Repotomata.Language","page":"Connection and GitHub","title":"Repotomata.Language","text":"Language\n\nWhen parsed from GitHub a Language has a name, color and the \"usage\" size.\n\nFields\n\nname::String: the language name.\ncolor::Colorant: the language color (provided by github/linguist).\nsize::Int: the relative usage of this Language in the repository.\n\nSee also: Repo\n\n\n\n\n\n","category":"type"},{"location":"connection/#Utility-functions","page":"Connection and GitHub","title":"Utility functions","text":"","category":"section"},{"location":"connection/","page":"Connection and GitHub","title":"Connection and GitHub","text":"query(connection::Connection, queryString::AbstractString)\nget_languages(connection::Connection)\ncreate_palette(repo::Repo)\ngetparameters!(parameters::Dict, repo::Repo)\nmake_language_query","category":"page"},{"location":"connection/#Repotomata.query-Tuple{Connection,AbstractString}","page":"Connection and GitHub","title":"Repotomata.query","text":"query(connection::Connection, queryString)\n\nThe base function to make the queries. It wraps the provided query in a \"repository\" query. It also handles connection and result errors.\n\n\n\n\n\n","category":"method"},{"location":"connection/#Repotomata.get_languages-Tuple{Connection}","page":"Connection and GitHub","title":"Repotomata.get_languages","text":"get_languages(connection)\n\nUtility function used to query all the languages of the repository. Return a Vector of Languages sorted by size (bigger first).\n\n\n\n\n\n","category":"method"},{"location":"connection/#Repotomata.create_palette-Tuple{Repo}","page":"Connection and GitHub","title":"Repotomata.create_palette","text":"create_palette(repo)\n\nUtility function used to create a color palette from the repositoty languages.\n\n\n\n\n\n","category":"method"},{"location":"connection/#Repotomata.getparameters!-Tuple{Dict,Repo}","page":"Connection and GitHub","title":"Repotomata.getparameters!","text":"getparameters(parameters, repo)\n\nDump the repo parameters into the given parameters Dict\n\n\n\n\n\n","category":"method"},{"location":"connection/#Repotomata.make_language_query","page":"Connection and GitHub","title":"Repotomata.make_language_query","text":"make_language_query(pageSize, after)\n\nProvide access to all the languages from the repository given the correct pageSize and after.\n\n\n\n\n\n","category":"function"},{"location":"connection/#Error-handling","page":"Connection and GitHub","title":"Error handling","text":"","category":"section"},{"location":"connection/","page":"Connection and GitHub","title":"Connection and GitHub","text":"Error\nGitHubError","category":"page"},{"location":"connection/#Repotomata.Error","page":"Connection and GitHub","title":"Repotomata.Error","text":"Error\n\nSimple error wrapper.\n\nFields\n\nname::String: the error name.\ntype::String: the error type.\nmessage::String: the error message.\n\n\n\n\n\n","category":"type"},{"location":"connection/#Repotomata.GitHubError","page":"Connection and GitHub","title":"Repotomata.GitHubError","text":"GitHubError\n\nAny error related to the repository connection.\n\nThe error is created with either:\n\nA HTTP.ExceptionRequest.StatusError\nA failling Diana.Result\n\nFields\n\nerrors::Vector{Error}: a collection of Errors.\n\n\n\n\n\n","category":"type"},{"location":"image/#Functions-and-methods-for-image-manipulation","page":"Image functions","title":"Functions and methods for image manipulation","text":"","category":"section"},{"location":"image/","page":"Image functions","title":"Image functions","text":"CurrentModule = Repotomata","category":"page"},{"location":"image/","page":"Image functions","title":"Image functions","text":"create_image(width::Int, height::Int, parameters::Dict)\ngenerate_images(input::Dict)\nnewgeneration(image::AbstractArray{<:Colorant,2}, rule::Rule, background_color::Colorant)\ngetpixel(image::AbstractArray{<:Colorant,2}, position::Point)\nsetpixel!(image::AbstractArray{<:Colorant,2}, position::Point, color::Colorant)","category":"page"},{"location":"image/#Repotomata.create_image-Tuple{Int64,Int64,Dict}","page":"Image functions","title":"Repotomata.create_image","text":"create_image(width, height, parameters)\n\nCreate the base image with the given width and height. The parameters will be used to generate the Perlin noise and the random points.\n\n\n\n\n\n","category":"method"},{"location":"image/#Repotomata.generate_images-Tuple{Dict}","page":"Image functions","title":"Repotomata.generate_images","text":"generate_images(input)\n\nCreate the base image and runs the evolutions. Return a Vector of the created images.\n\n\n\n\n\n","category":"method"},{"location":"image/#Repotomata.newgeneration-Tuple{AbstractArray{#s1,2} where #s1<:ColorTypes.Colorant,Repotomata.Rule,ColorTypes.Colorant}","page":"Image functions","title":"Repotomata.newgeneration","text":"newgeneration(image, rule, background_color)\n\nProduce a new image by applying the rule to the given image.\n\n\n\n\n\n","category":"method"},{"location":"image/#Repotomata.getpixel-Tuple{AbstractArray{#s1,2} where #s1<:ColorTypes.Colorant,GeometryBasics.Point}","page":"Image functions","title":"Repotomata.getpixel","text":"getpixel(image, position)\n\nReturn the color of the pixel at position in the image.\n\n\n\n\n\n","category":"method"},{"location":"image/#Repotomata.setpixel!-Tuple{AbstractArray{#s1,2} where #s1<:ColorTypes.Colorant,GeometryBasics.Point,ColorTypes.Colorant}","page":"Image functions","title":"Repotomata.setpixel!","text":"setpixel!(image, position, color)\n\nSet the color of the pixel at position in the image.\n\n\n\n\n\n","category":"method"},{"location":"Rules/","page":"Rules","title":"Rules","text":"CurrentModule = Repotomata","category":"page"},{"location":"Rules/","page":"Rules","title":"Rules","text":"Rule\nRule(neighbours::Vector{<:Point}, condition::Function)\ngetcolor(rule::Rule, image::AbstractArray{<:Colorant,2}, position::Point)\n\nchromatic_rule(palette::Vector{<:Colorant}, background_color::Colorant)\ngame_of_life(color::Colorant, background_color::Colorant)\n","category":"page"},{"location":"Rules/#Repotomata.Rule","page":"Rules","title":"Repotomata.Rule","text":"An automata rule\n\nThe rule is applied to all the image pixel for each epoch.\n\nFields\n\nneighbours: the pixels (relative positions) observered when applying the contidtion.\ncondition: this function is called for each pixel and must return the new color.\nextent: the image padding needed by the neighbours.\n\n\n\n\n\n","category":"type"},{"location":"Rules/#Repotomata.Rule-Tuple{Array{#s1,1} where #s1<:GeometryBasics.Point,Function}","page":"Rules","title":"Repotomata.Rule","text":"Rule(neighbours, condition)\n\nThe rule constructor. It will automatically create the extent.\n\n\n\n\n\n","category":"method"},{"location":"Rules/#Repotomata.getcolor-Tuple{Repotomata.Rule,AbstractArray{#s1,2} where #s1<:ColorTypes.Colorant,GeometryBasics.Point}","page":"Rules","title":"Repotomata.getcolor","text":"getcolor(rule, image, position)\n\nComputes the colors of the neighbours around position. Calls the rule's condition function and return its result.\n\n\n\n\n\n","category":"method"},{"location":"Rules/#Repotomata.chromatic_rule-Tuple{Array{#s1,1} where #s1<:ColorTypes.Colorant,ColorTypes.Colorant}","page":"Rules","title":"Repotomata.chromatic_rule","text":"chromatic_rule(palette, background_color)\n\nCreate a \"Chromatic rule\" with the following condition:\n\n    if current == background_color\n        3 OR 4 neighbours ≠ background_color  > neighbours' color of the \"smaller\" in the palette\n        else  > background_color\n    else\n        7 OR 8 neighbours ≠ background_color  > background_color\n        3 OR 4 neighbours ≠ background_color  > current\n        1 OR 2 neighbours ≠ background_color  > previous color in palette or reset to the middle\n        5 OR 6 neighbours ≠ background_color  > next color in palette or reset to the middle\n\n\n\n\n\n","category":"method"},{"location":"Rules/#Repotomata.game_of_life-Tuple{ColorTypes.Colorant,ColorTypes.Colorant}","page":"Rules","title":"Repotomata.game_of_life","text":"game_of_life(color, background_color)\n\nCreate a \"Game of life rule\" with the following condition:\n\n      if current = background_color && 3 neighbours ≠ background_color > color\n      if current ≠ background_color && 2 OR 3 neighbours ≠ background_color > color\n      else > background_color\n\n\n\n\n\n","category":"method"},{"location":"repotomata/","page":"Repotomata","title":"Repotomata","text":"CurrentModule = Repotomata","category":"page"},{"location":"repotomata/#Repotomata-main-function","page":"Repotomata","title":"Repotomata main function","text":"","category":"section"},{"location":"repotomata/","page":"Repotomata","title":"Repotomata","text":"repotomata(owner::AbstractString,name::AbstractString)","category":"page"},{"location":"repotomata/#Repotomata.repotomata-Tuple{AbstractString,AbstractString}","page":"Repotomata","title":"Repotomata.repotomata","text":"repotomata(owner::AbstractString, name::AbstractString; <keyword arguments>)\nrepotomata(ownername::AbstractString; kwargs...)\n\nGenerates a cellular automata animation of the given GitHub repository.\n\nnote: Note\nWhen using the second method, the format must be: \"owner/name\".\n\nArguments\n\nepochs::Int=10: the number of generations to compute.\nwidth::Integer=500: the output width (height will be automatically computed with the golden ratio).\noutput::OutputType=raw: the output type.\noutput_path::String=\"\": the output path when using OutputType.gif.\nrule::RuleType=chromatic: the rule to use.\nseed_treshold::Real=0.58: the threshold on the Perlin noise used as seed.\nbackground_color::Colorant=black: the background color.\n\n\n\n\n\n","category":"method"},{"location":"repotomata/#The-input-types","page":"Repotomata","title":"The input types","text":"","category":"section"},{"location":"repotomata/","page":"Repotomata","title":"Repotomata","text":"OutputType\nRuleType","category":"page"},{"location":"repotomata/#Repotomata.OutputType","page":"Repotomata","title":"Repotomata.OutputType","text":"The different output types\n\nraw: will return a Vector of the created images.\nviewer: will open the result in a viewer.\ngif: will create a gif file at the given output_path.\n\nSee also: repotomata\n\n\n\n\n\n","category":"type"},{"location":"repotomata/#Repotomata.RuleType","page":"Repotomata","title":"Repotomata.RuleType","text":"The different rules\n\nlife: the \"game of life\" rule.\nlanguages: the languages rule.\n\nSee also: repotomata\n\n\n\n\n\n","category":"type"},{"location":"repotomata/#The-viewer-utility-function","page":"Repotomata","title":"The viewer utility function","text":"","category":"section"},{"location":"repotomata/","page":"Repotomata","title":"Repotomata","text":"open_viewer(images::Array{Array{ColorTypes.RGB{Float64},2},1})","category":"page"},{"location":"repotomata/#Repotomata.open_viewer-Tuple{Array{Array{ColorTypes.RGB{Float64},2},1}}","page":"Repotomata","title":"Repotomata.open_viewer","text":"open_viewer(images)\n\nDisplay the images in an interactive window.\n\n\n\n\n\n","category":"method"},{"location":"#Repotomata.jl-Documentation","page":"Home","title":"Repotomata.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Repotomata","category":"page"},{"location":"","page":"Home","title":"Home","text":"Generate cellular automata animations based on any GitHub repository.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"repotomata(\"JuliaLang/Julia\")\nrepotomata(\"JuliaLang\", \"Julia\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"More on the repotomata page","category":"page"},{"location":"#How-?","page":"Home","title":"How ?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When given a valid repository owner and name the repotomata function will proceed the following steps:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Connect to the repository,\nQuery the following information:\nThe languages with their colors and sizes,\nThe number of stargazers, watchers, forks and the last update time.\nCreate a color palette including color variants of the languages colors. The number of colors in the palette is proportional to the size of each language\nGenerate an image filled with Perlin noise generated using the stargazers, watchers and forks numbers and the given threshold,\nFor each non-background pixels in the previous image we add a random pixel. The last update time is used as the Random seed,\nEvolve this image by applying the rule for each epochs","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Julia repository","category":"page"},{"location":"","page":"Home","title":"Home","text":"repotomata(\"JuliaLang/Julia\", output=Repotomata.gif, output_path=\"julia.gif\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: julia.gif example)","category":"page"}]
}
